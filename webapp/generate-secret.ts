import { randomBytes } from "crypto";

interface SecretOptions {
  length?: number;
  format?: "hex" | "base64";
}

function generateSecret({ length = 32, format = "hex" }: SecretOptions = {}): string {
  const secret = randomBytes(length);
  return format === "base64" ? secret.toString("base64") : secret.toString("hex");
}

function generateMultipleSecrets() {
  console.log("üîê G√©n√©ration de cl√©s secr√®tes s√©curis√©es\n");

  console.log("SESSION_SECRET (recommand√©) :");
  console.log(generateSecret({ length: 32, format: "hex" }));

  console.log("\nSESSION_SECRET (alternative base64) :");
  console.log(generateSecret({ length: 32, format: "base64" }));

  console.log("\nCl√© courte (16 bytes) :");
  console.log(generateSecret({ length: 16, format: "hex" }));

  console.log("\nCl√© longue (64 bytes) :");
  console.log(generateSecret({ length: 64, format: "hex" }));

  console.log("\nüìã Copiez une des cl√©s ci-dessus dans votre fichier .env.local :");
  console.log("SESSION_SECRET=votre-cl√©-g√©n√©r√©e-ici");

  console.log("\n‚ö†Ô∏è  Important : Gardez ces cl√©s priv√©es et utilisez des cl√©s diff√©rentes pour chaque environnement.");
}

// Ex√©cution du script si appel√© directement
if (require.main === module) {
  generateMultipleSecrets();
}

export { generateSecret, generateMultipleSecrets };
